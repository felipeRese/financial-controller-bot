// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
)

const createExpense = `-- name: CreateExpense :exec
INSERT INTO expenses (id, user_id, amount, category)
VALUES (?, ?, ?, ?)
`

type CreateExpenseParams struct {
	ID       string
	UserID   string
	Amount   float64
	Category string
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, createExpense,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.Category,
	)
	return err
}

const getExpensesByCategoryAndUserId = `-- name: GetExpensesByCategoryAndUserId :many
SELECT id, user_id, amount, category FROM expenses WHERE user_id = ? AND category = ?
`

type GetExpensesByCategoryAndUserIdParams struct {
	UserID   string
	Category string
}

func (q *Queries) GetExpensesByCategoryAndUserId(ctx context.Context, arg GetExpensesByCategoryAndUserIdParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByCategoryAndUserId, arg.UserID, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByUserId = `-- name: GetExpensesByUserId :many
SELECT id, user_id, amount, category FROM expenses 
WHERE user_id = ?
`

func (q *Queries) GetExpensesByUserId(ctx context.Context, userID string) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
